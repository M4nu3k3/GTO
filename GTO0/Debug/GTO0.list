
GTO0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000157c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001754  08001754  00002754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001764  08001764  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001764  08001764  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001764  08001764  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001764  08001764  00002764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001768  08001768  00002768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800176c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001778  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001778  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000045b0  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011b5  00000000  00000000  000075ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a0  00000000  00000000  000087a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000414  00000000  00000000  00008d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4c9  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006422  00000000  00000000  00024625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab523  00000000  00000000  0002aa47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5f6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001460  00000000  00000000  000d5fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000d7410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800173c 	.word	0x0800173c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800173c 	.word	0x0800173c

08000218 <Board_Periph_Init>:
#include "board_config.h"
#include "stm32g4xx_hal.h"


void Board_Periph_Init(void)
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
    // Activer horloges GPIO
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800021e:	4b21      	ldr	r3, [pc, #132]	@ (80002a4 <Board_Periph_Init+0x8c>)
 8000220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000222:	4a20      	ldr	r2, [pc, #128]	@ (80002a4 <Board_Periph_Init+0x8c>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800022a:	4b1e      	ldr	r3, [pc, #120]	@ (80002a4 <Board_Periph_Init+0x8c>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022e:	f003 0301 	and.w	r3, r3, #1
 8000232:	617b      	str	r3, [r7, #20]
 8000234:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000236:	4b1b      	ldr	r3, [pc, #108]	@ (80002a4 <Board_Periph_Init+0x8c>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023a:	4a1a      	ldr	r2, [pc, #104]	@ (80002a4 <Board_Periph_Init+0x8c>)
 800023c:	f043 0302 	orr.w	r3, r3, #2
 8000240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000242:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <Board_Periph_Init+0x8c>)
 8000244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000246:	f003 0302 	and.w	r3, r3, #2
 800024a:	613b      	str	r3, [r7, #16]
 800024c:	693b      	ldr	r3, [r7, #16]

    // Activer horloges des périphériques
    __HAL_RCC_SPI1_CLK_ENABLE();
 800024e:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <Board_Periph_Init+0x8c>)
 8000250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000252:	4a14      	ldr	r2, [pc, #80]	@ (80002a4 <Board_Periph_Init+0x8c>)
 8000254:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000258:	6613      	str	r3, [r2, #96]	@ 0x60
 800025a:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <Board_Periph_Init+0x8c>)
 800025c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800025e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8000266:	4b0f      	ldr	r3, [pc, #60]	@ (80002a4 <Board_Periph_Init+0x8c>)
 8000268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800026a:	4a0e      	ldr	r2, [pc, #56]	@ (80002a4 <Board_Periph_Init+0x8c>)
 800026c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000270:	6593      	str	r3, [r2, #88]	@ 0x58
 8000272:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <Board_Periph_Init+0x8c>)
 8000274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800027a:	60bb      	str	r3, [r7, #8]
 800027c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_TIM2_CLK_ENABLE();
 800027e:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <Board_Periph_Init+0x8c>)
 8000280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000282:	4a08      	ldr	r2, [pc, #32]	@ (80002a4 <Board_Periph_Init+0x8c>)
 8000284:	f043 0301 	orr.w	r3, r3, #1
 8000288:	6593      	str	r3, [r2, #88]	@ 0x58
 800028a:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <Board_Periph_Init+0x8c>)
 800028c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800028e:	f003 0301 	and.w	r3, r3, #1
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]
}
 8000296:	bf00      	nop
 8000298:	371c      	adds	r7, #28
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000

080002a8 <Board_GPIO_Init>:


void Board_GPIO_Init(void) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]

    // SPI1 GPIO Configuration
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	4b2b      	ldr	r3, [pc, #172]	@ (800036c <Board_GPIO_Init+0xc4>)
 80002be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c0:	4a2a      	ldr	r2, [pc, #168]	@ (800036c <Board_GPIO_Init+0xc4>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002c8:	4b28      	ldr	r3, [pc, #160]	@ (800036c <Board_GPIO_Init+0xc4>)
 80002ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002cc:	f003 0301 	and.w	r3, r3, #1
 80002d0:	603b      	str	r3, [r7, #0]
 80002d2:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = SPI1_SCK_PIN | SPI1_MISO_PIN | SPI1_MOSI_PIN;
 80002d4:	23e0      	movs	r3, #224	@ 0xe0
 80002d6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002d8:	2302      	movs	r3, #2
 80002da:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002e0:	2303      	movs	r3, #3
 80002e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80002e4:	2305      	movs	r3, #5
 80002e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SPI1_SCK_PORT, &GPIO_InitStruct);
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4619      	mov	r1, r3
 80002ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f0:	f000 faac 	bl	800084c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_NSS_PIN;
 80002f4:	2310      	movs	r3, #16
 80002f6:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(SPI1_NSS_PORT, &GPIO_InitStruct);
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4619      	mov	r1, r3
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000300:	f000 faa4 	bl	800084c <HAL_GPIO_Init>

    // USART2 GPIO Configuration
    GPIO_InitStruct.Pin = USART2_TX_PIN | USART2_RX_PIN;
 8000304:	230c      	movs	r3, #12
 8000306:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000308:	2307      	movs	r3, #7
 800030a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	4619      	mov	r1, r3
 8000310:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000314:	f000 fa9a 	bl	800084c <HAL_GPIO_Init>

    // TIM2 GPIO Configuration
    GPIO_InitStruct.Pin = TIM2_CH1_PIN | TIM2_CH2_PIN;
 8000318:	2303      	movs	r3, #3
 800031a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800031c:	2301      	movs	r3, #1
 800031e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(TIM2_CH1_PORT, &GPIO_InitStruct);
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4619      	mov	r1, r3
 8000324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000328:	f000 fa90 	bl	800084c <HAL_GPIO_Init>

    // GPIO Output Configuration
    GPIO_InitStruct.Pin = GPIO_OUT_1_PIN | GPIO_OUT_2_PIN | GPIO_OUT_3_PIN;
 800032c:	f44f 5344 	mov.w	r3, #12544	@ 0x3100
 8000330:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2301      	movs	r3, #1
 8000334:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIO_OUT_1_PORT, &GPIO_InitStruct);
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4619      	mov	r1, r3
 800033e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000342:	f000 fa83 	bl	800084c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_OUT_4_PIN;
 8000346:	2308      	movs	r3, #8
 8000348:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIO_OUT_4_PORT, &GPIO_InitStruct);
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4619      	mov	r1, r3
 800034e:	4808      	ldr	r0, [pc, #32]	@ (8000370 <Board_GPIO_Init+0xc8>)
 8000350:	f000 fa7c 	bl	800084c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_OUT_5_PIN;
 8000354:	2340      	movs	r3, #64	@ 0x40
 8000356:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIO_OUT_5_PORT, &GPIO_InitStruct);
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	4619      	mov	r1, r3
 800035c:	4804      	ldr	r0, [pc, #16]	@ (8000370 <Board_GPIO_Init+0xc8>)
 800035e:	f000 fa75 	bl	800084c <HAL_GPIO_Init>
}
 8000362:	bf00      	nop
 8000364:	3718      	adds	r7, #24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000
 8000370:	48000400 	.word	0x48000400

08000374 <main>:
#include "main.h"

void SystemClock_Config(void);

int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();                  // Init de HAL
 8000378:	f000 f8f1 	bl	800055e <HAL_Init>
  SystemClock_Config();        // Configuration de l'horloge système
 800037c:	f000 f810 	bl	80003a0 <SystemClock_Config>

  Board_Periph_Init();         // Activation des horloges GPIO et périphériques
 8000380:	f7ff ff4a 	bl	8000218 <Board_Periph_Init>
  Board_GPIO_Init();           // Initialisation des broches
 8000384:	f7ff ff90 	bl	80002a8 <Board_GPIO_Init>

  /* Boucle principale */
  while (1)
  {
    // Exemple : toggle GPIO_OUT_1 toutes les secondes
    HAL_GPIO_TogglePin(GPIO_OUT_1_PORT, GPIO_OUT_1_PIN);
 8000388:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800038c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000390:	f000 fbde 	bl	8000b50 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000394:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000398:	f000 f952 	bl	8000640 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIO_OUT_1_PORT, GPIO_OUT_1_PIN);
 800039c:	bf00      	nop
 800039e:	e7f3      	b.n	8000388 <main+0x14>

080003a0 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b094      	sub	sp, #80	@ 0x50
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0318 	add.w	r3, r7, #24
 80003aa:	2238      	movs	r2, #56	@ 0x38
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f001 f998 	bl	80016e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003c6:	f000 fbdd 	bl	8000b84 <HAL_PWREx_ControlVoltageScaling>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d4:	2340      	movs	r3, #64	@ 0x40
 80003d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d8:	2300      	movs	r3, #0
 80003da:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003dc:	f107 0318 	add.w	r3, r7, #24
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fc83 	bl	8000cec <HAL_RCC_OscConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x50>
    Error_Handler();
 80003ec:	f000 f818 	bl	8000420 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80003f0:	230f      	movs	r3, #15
 80003f2:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f4:	2301      	movs	r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2100      	movs	r1, #0
 8000408:	4618      	mov	r0, r3
 800040a:	f000 ff87 	bl	800131c <HAL_RCC_ClockConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x78>
    Error_Handler();
 8000414:	f000 f804 	bl	8000420 <Error_Handler>
}
 8000418:	bf00      	nop
 800041a:	3750      	adds	r7, #80	@ 0x50
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <Error_Handler>:

/**
  * @brief  Gestion d’erreur simple.
  */
void Error_Handler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  __disable_irq();
  while (1) {
    // Blink rapide sur GPIO_OUT_1 pour signaler erreur
    HAL_GPIO_TogglePin(GPIO_OUT_1_PORT, GPIO_OUT_1_PIN);
 8000428:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800042c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000430:	f000 fb8e 	bl	8000b50 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000434:	2064      	movs	r0, #100	@ 0x64
 8000436:	f000 f903 	bl	8000640 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIO_OUT_1_PORT, GPIO_OUT_1_PIN);
 800043a:	bf00      	nop
 800043c:	e7f4      	b.n	8000428 <Error_Handler+0x8>
	...

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000446:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <HAL_MspInit+0x44>)
 8000448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800044a:	4a0e      	ldr	r2, [pc, #56]	@ (8000484 <HAL_MspInit+0x44>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6613      	str	r3, [r2, #96]	@ 0x60
 8000452:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <HAL_MspInit+0x44>)
 8000454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <HAL_MspInit+0x44>)
 8000460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000462:	4a08      	ldr	r2, [pc, #32]	@ (8000484 <HAL_MspInit+0x44>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000468:	6593      	str	r3, [r2, #88]	@ 0x58
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <HAL_MspInit+0x44>)
 800046c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800046e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000476:	f000 fc29 	bl	8000ccc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <NMI_Handler+0x4>

08000490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <MemManage_Handler+0x4>

080004a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <BusFault_Handler+0x4>

080004a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <UsageFault_Handler+0x4>

080004b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004de:	f000 f891 	bl	8000604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <SystemInit+0x20>)
 80004ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004f2:	4a05      	ldr	r2, [pc, #20]	@ (8000508 <SystemInit+0x20>)
 80004f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800050c:	480d      	ldr	r0, [pc, #52]	@ (8000544 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480d      	ldr	r0, [pc, #52]	@ (8000548 <LoopForever+0x6>)
  ldr r1, =_edata
 8000512:	490e      	ldr	r1, [pc, #56]	@ (800054c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000514:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <LoopForever+0xe>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a0b      	ldr	r2, [pc, #44]	@ (8000554 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000528:	4c0b      	ldr	r4, [pc, #44]	@ (8000558 <LoopForever+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000536:	f7ff ffd7 	bl	80004e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053a:	f001 f8db 	bl	80016f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800053e:	f7ff ff19 	bl	8000374 <main>

08000542 <LoopForever>:

LoopForever:
    b LoopForever
 8000542:	e7fe      	b.n	8000542 <LoopForever>
  ldr   r0, =_estack
 8000544:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000550:	0800176c 	.word	0x0800176c
  ldr r2, =_sbss
 8000554:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000558:	2000002c 	.word	0x2000002c

0800055c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC1_2_IRQHandler>

0800055e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b082      	sub	sp, #8
 8000562:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000564:	2300      	movs	r3, #0
 8000566:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 f93d 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800056e:	200f      	movs	r0, #15
 8000570:	f000 f80e 	bl	8000590 <HAL_InitTick>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800057a:	2301      	movs	r3, #1
 800057c:	71fb      	strb	r3, [r7, #7]
 800057e:	e001      	b.n	8000584 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000580:	f7ff ff5e 	bl	8000440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000584:	79fb      	ldrb	r3, [r7, #7]

}
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000598:	2300      	movs	r3, #0
 800059a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800059c:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <HAL_InitTick+0x68>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d022      	beq.n	80005ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <HAL_InitTick+0x6c>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <HAL_InitTick+0x68>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f93a 	bl	8000832 <HAL_SYSTICK_Config>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d10f      	bne.n	80005e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b0f      	cmp	r3, #15
 80005c8:	d809      	bhi.n	80005de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ca:	2200      	movs	r2, #0
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	f04f 30ff 	mov.w	r0, #4294967295
 80005d2:	f000 f914 	bl	80007fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000600 <HAL_InitTick+0x70>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	e007      	b.n	80005ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	73fb      	strb	r3, [r7, #15]
 80005e2:	e004      	b.n	80005ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005e4:	2301      	movs	r3, #1
 80005e6:	73fb      	strb	r3, [r7, #15]
 80005e8:	e001      	b.n	80005ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
 80005ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000008 	.word	0x20000008
 80005fc:	20000000 	.word	0x20000000
 8000600:	20000004 	.word	0x20000004

08000604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <HAL_IncTick+0x1c>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <HAL_IncTick+0x20>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4413      	add	r3, r2
 8000612:	4a03      	ldr	r2, [pc, #12]	@ (8000620 <HAL_IncTick+0x1c>)
 8000614:	6013      	str	r3, [r2, #0]
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	20000028 	.word	0x20000028
 8000624:	20000008 	.word	0x20000008

08000628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return uwTick;
 800062c:	4b03      	ldr	r3, [pc, #12]	@ (800063c <HAL_GetTick+0x14>)
 800062e:	681b      	ldr	r3, [r3, #0]
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000028 	.word	0x20000028

08000640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000648:	f7ff ffee 	bl	8000628 <HAL_GetTick>
 800064c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000658:	d004      	beq.n	8000664 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800065a:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <HAL_Delay+0x40>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000664:	bf00      	nop
 8000666:	f7ff ffdf 	bl	8000628 <HAL_GetTick>
 800066a:	4602      	mov	r2, r0
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	429a      	cmp	r2, r3
 8000674:	d8f7      	bhi.n	8000666 <HAL_Delay+0x26>
  {
  }
}
 8000676:	bf00      	nop
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000008 	.word	0x20000008

08000684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006b6:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	60d3      	str	r3, [r2, #12]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_GetPriorityGrouping+0x18>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	f003 0307 	and.w	r3, r3, #7
}
 80006da:	4618      	mov	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	@ (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	@ (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	@ 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	@ 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007b4:	d301      	bcc.n	80007ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00f      	b.n	80007da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <SysTick_Config+0x40>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c2:	210f      	movs	r1, #15
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f7ff ff8e 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <SysTick_Config+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <SysTick_Config+0x40>)
 80007d4:	2207      	movs	r2, #7
 80007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	e000e010 	.word	0xe000e010

080007e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff47 	bl	8000684 <__NVIC_SetPriorityGrouping>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800080c:	f7ff ff5e 	bl	80006cc <__NVIC_GetPriorityGrouping>
 8000810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f7ff ff90 	bl	800073c <NVIC_EncodePriority>
 800081c:	4602      	mov	r2, r0
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff5f 	bl	80006e8 <__NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ffb2 	bl	80007a4 <SysTick_Config>
 8000840:	4603      	mov	r3, r0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800084c:	b480      	push	{r7}
 800084e:	b087      	sub	sp, #28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800085a:	e15a      	b.n	8000b12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	2101      	movs	r1, #1
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	fa01 f303 	lsl.w	r3, r1, r3
 8000868:	4013      	ands	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b00      	cmp	r3, #0
 8000870:	f000 814c 	beq.w	8000b0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d00b      	beq.n	8000894 <HAL_GPIO_Init+0x48>
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b02      	cmp	r3, #2
 8000882:	d007      	beq.n	8000894 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000888:	2b11      	cmp	r3, #17
 800088a:	d003      	beq.n	8000894 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b12      	cmp	r3, #18
 8000892:	d130      	bne.n	80008f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	2203      	movs	r2, #3
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4013      	ands	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	68da      	ldr	r2, [r3, #12]
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ca:	2201      	movs	r2, #1
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4013      	ands	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	091b      	lsrs	r3, r3, #4
 80008e0:	f003 0201 	and.w	r2, r3, #1
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2203      	movs	r2, #3
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	689a      	ldr	r2, [r3, #8]
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4313      	orrs	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d003      	beq.n	8000936 <HAL_GPIO_Init+0xea>
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b12      	cmp	r3, #18
 8000934:	d123      	bne.n	800097e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	08da      	lsrs	r2, r3, #3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3208      	adds	r2, #8
 800093e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000942:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	220f      	movs	r2, #15
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	691a      	ldr	r2, [r3, #16]
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f003 0307 	and.w	r3, r3, #7
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	08da      	lsrs	r2, r3, #3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3208      	adds	r2, #8
 8000978:	6939      	ldr	r1, [r7, #16]
 800097a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	2203      	movs	r2, #3
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4013      	ands	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f003 0203 	and.w	r2, r3, #3
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 80a6 	beq.w	8000b0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c0:	4b5b      	ldr	r3, [pc, #364]	@ (8000b30 <HAL_GPIO_Init+0x2e4>)
 80009c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c4:	4a5a      	ldr	r2, [pc, #360]	@ (8000b30 <HAL_GPIO_Init+0x2e4>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80009cc:	4b58      	ldr	r3, [pc, #352]	@ (8000b30 <HAL_GPIO_Init+0x2e4>)
 80009ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009d8:	4a56      	ldr	r2, [pc, #344]	@ (8000b34 <HAL_GPIO_Init+0x2e8>)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	089b      	lsrs	r3, r3, #2
 80009de:	3302      	adds	r3, #2
 80009e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	f003 0303 	and.w	r3, r3, #3
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	220f      	movs	r2, #15
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a02:	d01f      	beq.n	8000a44 <HAL_GPIO_Init+0x1f8>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a4c      	ldr	r2, [pc, #304]	@ (8000b38 <HAL_GPIO_Init+0x2ec>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d019      	beq.n	8000a40 <HAL_GPIO_Init+0x1f4>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a4b      	ldr	r2, [pc, #300]	@ (8000b3c <HAL_GPIO_Init+0x2f0>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d013      	beq.n	8000a3c <HAL_GPIO_Init+0x1f0>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a4a      	ldr	r2, [pc, #296]	@ (8000b40 <HAL_GPIO_Init+0x2f4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d00d      	beq.n	8000a38 <HAL_GPIO_Init+0x1ec>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a49      	ldr	r2, [pc, #292]	@ (8000b44 <HAL_GPIO_Init+0x2f8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d007      	beq.n	8000a34 <HAL_GPIO_Init+0x1e8>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a48      	ldr	r2, [pc, #288]	@ (8000b48 <HAL_GPIO_Init+0x2fc>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d101      	bne.n	8000a30 <HAL_GPIO_Init+0x1e4>
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	e00a      	b.n	8000a46 <HAL_GPIO_Init+0x1fa>
 8000a30:	2306      	movs	r3, #6
 8000a32:	e008      	b.n	8000a46 <HAL_GPIO_Init+0x1fa>
 8000a34:	2304      	movs	r3, #4
 8000a36:	e006      	b.n	8000a46 <HAL_GPIO_Init+0x1fa>
 8000a38:	2303      	movs	r3, #3
 8000a3a:	e004      	b.n	8000a46 <HAL_GPIO_Init+0x1fa>
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	e002      	b.n	8000a46 <HAL_GPIO_Init+0x1fa>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <HAL_GPIO_Init+0x1fa>
 8000a44:	2300      	movs	r3, #0
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	f002 0203 	and.w	r2, r2, #3
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	4093      	lsls	r3, r2
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a56:	4937      	ldr	r1, [pc, #220]	@ (8000b34 <HAL_GPIO_Init+0x2e8>)
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a64:	4b39      	ldr	r3, [pc, #228]	@ (8000b4c <HAL_GPIO_Init+0x300>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a88:	4a30      	ldr	r2, [pc, #192]	@ (8000b4c <HAL_GPIO_Init+0x300>)
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b4c <HAL_GPIO_Init+0x300>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ab2:	4a26      	ldr	r2, [pc, #152]	@ (8000b4c <HAL_GPIO_Init+0x300>)
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ab8:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <HAL_GPIO_Init+0x300>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000adc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b4c <HAL_GPIO_Init+0x300>)
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <HAL_GPIO_Init+0x300>)
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b06:	4a11      	ldr	r2, [pc, #68]	@ (8000b4c <HAL_GPIO_Init+0x300>)
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f47f ae9d 	bne.w	800085c <HAL_GPIO_Init+0x10>
  }
}
 8000b22:	bf00      	nop
 8000b24:	bf00      	nop
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40010000 	.word	0x40010000
 8000b38:	48000400 	.word	0x48000400
 8000b3c:	48000800 	.word	0x48000800
 8000b40:	48000c00 	.word	0x48000c00
 8000b44:	48001000 	.word	0x48001000
 8000b48:	48001400 	.word	0x48001400
 8000b4c:	40010400 	.word	0x40010400

08000b50 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b62:	887a      	ldrh	r2, [r7, #2]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4013      	ands	r3, r2
 8000b68:	041a      	lsls	r2, r3, #16
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	43d9      	mvns	r1, r3
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	400b      	ands	r3, r1
 8000b72:	431a      	orrs	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	619a      	str	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d141      	bne.n	8000c16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b92:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b9e:	d131      	bne.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ba0:	4b47      	ldr	r3, [pc, #284]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ba6:	4a46      	ldr	r2, [pc, #280]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000bac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb0:	4b43      	ldr	r3, [pc, #268]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bb8:	4a41      	ldr	r2, [pc, #260]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bc0:	4b40      	ldr	r3, [pc, #256]	@ (8000cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2232      	movs	r2, #50	@ 0x32
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	4a3f      	ldr	r2, [pc, #252]	@ (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd0:	0c9b      	lsrs	r3, r3, #18
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd6:	e002      	b.n	8000bde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bde:	4b38      	ldr	r3, [pc, #224]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bea:	d102      	bne.n	8000bf2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f2      	bne.n	8000bd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bf2:	4b33      	ldr	r3, [pc, #204]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bfe:	d158      	bne.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	e057      	b.n	8000cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c04:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000c14:	e04d      	b.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c1c:	d141      	bne.n	8000ca2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c1e:	4b28      	ldr	r3, [pc, #160]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c2a:	d131      	bne.n	8000c90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c2c:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c32:	4a23      	ldr	r2, [pc, #140]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c3c:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c44:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2232      	movs	r2, #50	@ 0x32
 8000c52:	fb02 f303 	mul.w	r3, r2, r3
 8000c56:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c58:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5c:	0c9b      	lsrs	r3, r3, #18
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c62:	e002      	b.n	8000c6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c76:	d102      	bne.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f2      	bne.n	8000c64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c8a:	d112      	bne.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e011      	b.n	8000cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c90:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000ca0:	e007      	b.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ca2:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000caa:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cb0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	40007000 	.word	0x40007000
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	431bde83 	.word	0x431bde83

08000ccc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000cd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cda:	6093      	str	r3, [r2, #8]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40007000 	.word	0x40007000

08000cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e306      	b.n	800130c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d075      	beq.n	8000df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d0a:	4b97      	ldr	r3, [pc, #604]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
 8000d12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d14:	4b94      	ldr	r3, [pc, #592]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	2b0c      	cmp	r3, #12
 8000d22:	d102      	bne.n	8000d2a <HAL_RCC_OscConfig+0x3e>
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d002      	beq.n	8000d30 <HAL_RCC_OscConfig+0x44>
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	2b08      	cmp	r3, #8
 8000d2e:	d10b      	bne.n	8000d48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d30:	4b8d      	ldr	r3, [pc, #564]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d05b      	beq.n	8000df4 <HAL_RCC_OscConfig+0x108>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d157      	bne.n	8000df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e2e1      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d50:	d106      	bne.n	8000d60 <HAL_RCC_OscConfig+0x74>
 8000d52:	4b85      	ldr	r3, [pc, #532]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a84      	ldr	r2, [pc, #528]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	e01d      	b.n	8000d9c <HAL_RCC_OscConfig+0xb0>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d68:	d10c      	bne.n	8000d84 <HAL_RCC_OscConfig+0x98>
 8000d6a:	4b7f      	ldr	r3, [pc, #508]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a7e      	ldr	r2, [pc, #504]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b7c      	ldr	r3, [pc, #496]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a7b      	ldr	r2, [pc, #492]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e00b      	b.n	8000d9c <HAL_RCC_OscConfig+0xb0>
 8000d84:	4b78      	ldr	r3, [pc, #480]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a77      	ldr	r2, [pc, #476]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b75      	ldr	r3, [pc, #468]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a74      	ldr	r2, [pc, #464]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d013      	beq.n	8000dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000da4:	f7ff fc40 	bl	8000628 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff fc3c 	bl	8000628 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	@ 0x64
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e2a6      	b.n	800130c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0xc0>
 8000dca:	e014      	b.n	8000df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fc2c 	bl	8000628 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fc28 	bl	8000628 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b64      	cmp	r3, #100	@ 0x64
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e292      	b.n	800130c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000de6:	4b60      	ldr	r3, [pc, #384]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0xe8>
 8000df2:	e000      	b.n	8000df6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d075      	beq.n	8000eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e02:	4b59      	ldr	r3, [pc, #356]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e0c:	4b56      	ldr	r3, [pc, #344]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2b0c      	cmp	r3, #12
 8000e1a:	d102      	bne.n	8000e22 <HAL_RCC_OscConfig+0x136>
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d002      	beq.n	8000e28 <HAL_RCC_OscConfig+0x13c>
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d11f      	bne.n	8000e68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e28:	4b4f      	ldr	r3, [pc, #316]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <HAL_RCC_OscConfig+0x154>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e265      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e40:	4b49      	ldr	r3, [pc, #292]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	061b      	lsls	r3, r3, #24
 8000e4e:	4946      	ldr	r1, [pc, #280]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e50:	4313      	orrs	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e54:	4b45      	ldr	r3, [pc, #276]	@ (8000f6c <HAL_RCC_OscConfig+0x280>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb99 	bl	8000590 <HAL_InitTick>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d043      	beq.n	8000eec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e251      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d023      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e70:	4b3d      	ldr	r3, [pc, #244]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a3c      	ldr	r2, [pc, #240]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fbd4 	bl	8000628 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e84:	f7ff fbd0 	bl	8000628 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e23a      	b.n	800130c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e96:	4b34      	ldr	r3, [pc, #208]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea2:	4b31      	ldr	r3, [pc, #196]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	061b      	lsls	r3, r3, #24
 8000eb0:	492d      	ldr	r1, [pc, #180]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	604b      	str	r3, [r1, #4]
 8000eb6:	e01a      	b.n	8000eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000ebe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fbb0 	bl	8000628 <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fbac 	bl	8000628 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e216      	b.n	800130c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ede:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f0      	bne.n	8000ecc <HAL_RCC_OscConfig+0x1e0>
 8000eea:	e000      	b.n	8000eee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d041      	beq.n	8000f7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d01c      	beq.n	8000f3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f08:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f12:	f7ff fb89 	bl	8000628 <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f18:	e008      	b.n	8000f2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1a:	f7ff fb85 	bl	8000628 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e1ef      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0ef      	beq.n	8000f1a <HAL_RCC_OscConfig+0x22e>
 8000f3a:	e020      	b.n	8000f7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f42:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f4c:	f7ff fb6c 	bl	8000628 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f52:	e00d      	b.n	8000f70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f54:	f7ff fb68 	bl	8000628 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d906      	bls.n	8000f70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e1d2      	b.n	800130c <HAL_RCC_OscConfig+0x620>
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f70:	4b8c      	ldr	r3, [pc, #560]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8000f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1ea      	bne.n	8000f54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 80a6 	beq.w	80010d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f90:	4b84      	ldr	r3, [pc, #528]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8000f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x2b4>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <HAL_RCC_OscConfig+0x2b6>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000faa:	4a7e      	ldr	r2, [pc, #504]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fb2:	4b7c      	ldr	r3, [pc, #496]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fc2:	4b79      	ldr	r3, [pc, #484]	@ (80011a8 <HAL_RCC_OscConfig+0x4bc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d118      	bne.n	8001000 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fce:	4b76      	ldr	r3, [pc, #472]	@ (80011a8 <HAL_RCC_OscConfig+0x4bc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a75      	ldr	r2, [pc, #468]	@ (80011a8 <HAL_RCC_OscConfig+0x4bc>)
 8000fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fb25 	bl	8000628 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe2:	f7ff fb21 	bl	8000628 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e18b      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ff4:	4b6c      	ldr	r3, [pc, #432]	@ (80011a8 <HAL_RCC_OscConfig+0x4bc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d108      	bne.n	800101a <HAL_RCC_OscConfig+0x32e>
 8001008:	4b66      	ldr	r3, [pc, #408]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800100a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800100e:	4a65      	ldr	r2, [pc, #404]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001018:	e024      	b.n	8001064 <HAL_RCC_OscConfig+0x378>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b05      	cmp	r3, #5
 8001020:	d110      	bne.n	8001044 <HAL_RCC_OscConfig+0x358>
 8001022:	4b60      	ldr	r3, [pc, #384]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001028:	4a5e      	ldr	r2, [pc, #376]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001032:	4b5c      	ldr	r3, [pc, #368]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001038:	4a5a      	ldr	r2, [pc, #360]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001042:	e00f      	b.n	8001064 <HAL_RCC_OscConfig+0x378>
 8001044:	4b57      	ldr	r3, [pc, #348]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800104a:	4a56      	ldr	r2, [pc, #344]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001054:	4b53      	ldr	r3, [pc, #332]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800105a:	4a52      	ldr	r2, [pc, #328]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800105c:	f023 0304 	bic.w	r3, r3, #4
 8001060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d016      	beq.n	800109a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800106c:	f7ff fadc 	bl	8000628 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001072:	e00a      	b.n	800108a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001074:	f7ff fad8 	bl	8000628 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001082:	4293      	cmp	r3, r2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e140      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800108a:	4b46      	ldr	r3, [pc, #280]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800108c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0ed      	beq.n	8001074 <HAL_RCC_OscConfig+0x388>
 8001098:	e015      	b.n	80010c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109a:	f7ff fac5 	bl	8000628 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010a0:	e00a      	b.n	80010b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff fac1 	bl	8000628 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e129      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010b8:	4b3a      	ldr	r3, [pc, #232]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 80010ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1ed      	bne.n	80010a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010c6:	7ffb      	ldrb	r3, [r7, #31]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d105      	bne.n	80010d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010cc:	4b35      	ldr	r3, [pc, #212]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 80010ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d0:	4a34      	ldr	r2, [pc, #208]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 80010d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d03c      	beq.n	800115e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d01c      	beq.n	8001126 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80010ec:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 80010ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80010f2:	4a2c      	ldr	r2, [pc, #176]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fc:	f7ff fa94 	bl	8000628 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001104:	f7ff fa90 	bl	8000628 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e0fa      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001116:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001118:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0ef      	beq.n	8001104 <HAL_RCC_OscConfig+0x418>
 8001124:	e01b      	b.n	800115e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001126:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001128:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800112c:	4a1d      	ldr	r2, [pc, #116]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800112e:	f023 0301 	bic.w	r3, r3, #1
 8001132:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001136:	f7ff fa77 	bl	8000628 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800113e:	f7ff fa73 	bl	8000628 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e0dd      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001152:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1ef      	bne.n	800113e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 80d1 	beq.w	800130a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	2b0c      	cmp	r3, #12
 8001172:	f000 808b 	beq.w	800128c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d15e      	bne.n	800123c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001184:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118a:	f7ff fa4d 	bl	8000628 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001190:	e00c      	b.n	80011ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001192:	f7ff fa49 	bl	8000628 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d905      	bls.n	80011ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e0b3      	b.n	800130c <HAL_RCC_OscConfig+0x620>
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011ac:	4b59      	ldr	r3, [pc, #356]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1ec      	bne.n	8001192 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011b8:	4b56      	ldr	r3, [pc, #344]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	4b56      	ldr	r3, [pc, #344]	@ (8001318 <HAL_RCC_OscConfig+0x62c>)
 80011be:	4013      	ands	r3, r2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6a11      	ldr	r1, [r2, #32]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80011c8:	3a01      	subs	r2, #1
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	4311      	orrs	r1, r2
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80011d2:	0212      	lsls	r2, r2, #8
 80011d4:	4311      	orrs	r1, r2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80011da:	0852      	lsrs	r2, r2, #1
 80011dc:	3a01      	subs	r2, #1
 80011de:	0552      	lsls	r2, r2, #21
 80011e0:	4311      	orrs	r1, r2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80011e6:	0852      	lsrs	r2, r2, #1
 80011e8:	3a01      	subs	r2, #1
 80011ea:	0652      	lsls	r2, r2, #25
 80011ec:	4311      	orrs	r1, r2
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80011f2:	06d2      	lsls	r2, r2, #27
 80011f4:	430a      	orrs	r2, r1
 80011f6:	4947      	ldr	r1, [pc, #284]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011fc:	4b45      	ldr	r3, [pc, #276]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a44      	ldr	r2, [pc, #272]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 8001202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001206:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001208:	4b42      	ldr	r3, [pc, #264]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	4a41      	ldr	r2, [pc, #260]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 800120e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001212:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fa08 	bl	8000628 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121c:	f7ff fa04 	bl	8000628 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e06e      	b.n	800130c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800122e:	4b39      	ldr	r3, [pc, #228]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0x530>
 800123a:	e066      	b.n	800130a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123c:	4b35      	ldr	r3, [pc, #212]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a34      	ldr	r2, [pc, #208]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 8001242:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001246:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001248:	4b32      	ldr	r3, [pc, #200]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4a31      	ldr	r2, [pc, #196]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 800124e:	f023 0303 	bic.w	r3, r3, #3
 8001252:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001254:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4a2e      	ldr	r2, [pc, #184]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 800125a:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800125e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001262:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff f9e0 	bl	8000628 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126c:	f7ff f9dc 	bl	8000628 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e046      	b.n	800130c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800127e:	4b25      	ldr	r3, [pc, #148]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x580>
 800128a:	e03e      	b.n	800130a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e039      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001298:	4b1e      	ldr	r3, [pc, #120]	@ (8001314 <HAL_RCC_OscConfig+0x628>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d12c      	bne.n	8001306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	3b01      	subs	r3, #1
 80012b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d123      	bne.n	8001306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d11b      	bne.n	8001306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012da:	429a      	cmp	r2, r3
 80012dc:	d113      	bne.n	8001306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	3b01      	subs	r3, #1
 80012ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d109      	bne.n	8001306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012fc:	085b      	lsrs	r3, r3, #1
 80012fe:	3b01      	subs	r3, #1
 8001300:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001302:	429a      	cmp	r2, r3
 8001304:	d001      	beq.n	800130a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	019f800c 	.word	0x019f800c

0800131c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e11e      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001334:	4b91      	ldr	r3, [pc, #580]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d910      	bls.n	8001364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b8e      	ldr	r3, [pc, #568]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 020f 	bic.w	r2, r3, #15
 800134a:	498c      	ldr	r1, [pc, #560]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	4b8a      	ldr	r3, [pc, #552]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d001      	beq.n	8001364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e106      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d073      	beq.n	8001458 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b03      	cmp	r3, #3
 8001376:	d129      	bne.n	80013cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001378:	4b81      	ldr	r3, [pc, #516]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0f4      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001388:	f000 f966 	bl	8001658 <RCC_GetSysClockFreqFromPLLSource>
 800138c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4a7c      	ldr	r2, [pc, #496]	@ (8001584 <HAL_RCC_ClockConfig+0x268>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d93f      	bls.n	8001416 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001396:	4b7a      	ldr	r3, [pc, #488]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d033      	beq.n	8001416 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d12f      	bne.n	8001416 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80013b6:	4b72      	ldr	r3, [pc, #456]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013be:	4a70      	ldr	r2, [pc, #448]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80013c6:	2380      	movs	r3, #128	@ 0x80
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e024      	b.n	8001416 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d109      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0c6      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e4:	4b66      	ldr	r3, [pc, #408]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0be      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80013f4:	f000 f8ce 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4a61      	ldr	r2, [pc, #388]	@ (8001584 <HAL_RCC_ClockConfig+0x268>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d909      	bls.n	8001416 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001402:	4b5f      	ldr	r3, [pc, #380]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800140a:	4a5d      	ldr	r2, [pc, #372]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001410:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001412:	2380      	movs	r3, #128	@ 0x80
 8001414:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001416:	4b5a      	ldr	r3, [pc, #360]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f023 0203 	bic.w	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4957      	ldr	r1, [pc, #348]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001424:	4313      	orrs	r3, r2
 8001426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001428:	f7ff f8fe 	bl	8000628 <HAL_GetTick>
 800142c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	e00a      	b.n	8001446 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001430:	f7ff f8fa 	bl	8000628 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e095      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001446:	4b4e      	ldr	r3, [pc, #312]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 020c 	and.w	r2, r3, #12
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	429a      	cmp	r2, r3
 8001456:	d1eb      	bne.n	8001430 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d023      	beq.n	80014ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001470:	4b43      	ldr	r3, [pc, #268]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a42      	ldr	r2, [pc, #264]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001476:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800147a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001488:	4b3d      	ldr	r3, [pc, #244]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001490:	4a3b      	ldr	r2, [pc, #236]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001492:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001496:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001498:	4b39      	ldr	r3, [pc, #228]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4936      	ldr	r1, [pc, #216]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	608b      	str	r3, [r1, #8]
 80014aa:	e008      	b.n	80014be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b80      	cmp	r3, #128	@ 0x80
 80014b0:	d105      	bne.n	80014be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80014b2:	4b33      	ldr	r3, [pc, #204]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	4a32      	ldr	r2, [pc, #200]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80014b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014be:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d21d      	bcs.n	8001508 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014cc:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 020f 	bic.w	r2, r3, #15
 80014d4:	4929      	ldr	r1, [pc, #164]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014dc:	f7ff f8a4 	bl	8000628 <HAL_GetTick>
 80014e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e4:	f7ff f8a0 	bl	8000628 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e03b      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b20      	ldr	r3, [pc, #128]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d1ed      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001514:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4917      	ldr	r1, [pc, #92]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d009      	beq.n	8001546 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	490f      	ldr	r1, [pc, #60]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001546:	f000 f825 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 800154a:	4602      	mov	r2, r0
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	490c      	ldr	r1, [pc, #48]	@ (8001588 <HAL_RCC_ClockConfig+0x26c>)
 8001558:	5ccb      	ldrb	r3, [r1, r3]
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	fa22 f303 	lsr.w	r3, r2, r3
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <HAL_RCC_ClockConfig+0x270>)
 8001564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_RCC_ClockConfig+0x274>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f810 	bl	8000590 <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40022000 	.word	0x40022000
 8001580:	40021000 	.word	0x40021000
 8001584:	04c4b400 	.word	0x04c4b400
 8001588:	08001754 	.word	0x08001754
 800158c:	20000000 	.word	0x20000000
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800159a:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d102      	bne.n	80015ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	e047      	b.n	800163c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015ac:	4b27      	ldr	r3, [pc, #156]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d102      	bne.n	80015be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015b8:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	e03e      	b.n	800163c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015be:	4b23      	ldr	r3, [pc, #140]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d136      	bne.n	8001638 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015ca:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3301      	adds	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d10c      	bne.n	8001602 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f0:	4a16      	ldr	r2, [pc, #88]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f2:	68d2      	ldr	r2, [r2, #12]
 80015f4:	0a12      	lsrs	r2, r2, #8
 80015f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
      break;
 8001600:	e00c      	b.n	800161c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001602:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4a10      	ldr	r2, [pc, #64]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 800160c:	68d2      	ldr	r2, [r2, #12]
 800160e:	0a12      	lsrs	r2, r2, #8
 8001610:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]
      break;
 800161a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0e5b      	lsrs	r3, r3, #25
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	3301      	adds	r3, #1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	fbb2 f3f3 	udiv	r3, r2, r3
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	e001      	b.n	800163c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800163c:	693b      	ldr	r3, [r7, #16]
}
 800163e:	4618      	mov	r0, r3
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	00f42400 	.word	0x00f42400
 8001654:	007a1200 	.word	0x007a1200

08001658 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001668:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3301      	adds	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d10c      	bne.n	8001696 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800167c:	4a17      	ldr	r2, [pc, #92]	@ (80016dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	fbb2 f3f3 	udiv	r3, r2, r3
 8001684:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001686:	68d2      	ldr	r2, [r2, #12]
 8001688:	0a12      	lsrs	r2, r2, #8
 800168a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
    break;
 8001694:	e00c      	b.n	80016b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4a0e      	ldr	r2, [pc, #56]	@ (80016d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016a0:	68d2      	ldr	r2, [r2, #12]
 80016a2:	0a12      	lsrs	r2, r2, #8
 80016a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	617b      	str	r3, [r7, #20]
    break;
 80016ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0e5b      	lsrs	r3, r3, #25
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	3301      	adds	r3, #1
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80016ca:	687b      	ldr	r3, [r7, #4]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000
 80016dc:	007a1200 	.word	0x007a1200
 80016e0:	00f42400 	.word	0x00f42400

080016e4 <memset>:
 80016e4:	4402      	add	r2, r0
 80016e6:	4603      	mov	r3, r0
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d100      	bne.n	80016ee <memset+0xa>
 80016ec:	4770      	bx	lr
 80016ee:	f803 1b01 	strb.w	r1, [r3], #1
 80016f2:	e7f9      	b.n	80016e8 <memset+0x4>

080016f4 <__libc_init_array>:
 80016f4:	b570      	push	{r4, r5, r6, lr}
 80016f6:	4d0d      	ldr	r5, [pc, #52]	@ (800172c <__libc_init_array+0x38>)
 80016f8:	4c0d      	ldr	r4, [pc, #52]	@ (8001730 <__libc_init_array+0x3c>)
 80016fa:	1b64      	subs	r4, r4, r5
 80016fc:	10a4      	asrs	r4, r4, #2
 80016fe:	2600      	movs	r6, #0
 8001700:	42a6      	cmp	r6, r4
 8001702:	d109      	bne.n	8001718 <__libc_init_array+0x24>
 8001704:	4d0b      	ldr	r5, [pc, #44]	@ (8001734 <__libc_init_array+0x40>)
 8001706:	4c0c      	ldr	r4, [pc, #48]	@ (8001738 <__libc_init_array+0x44>)
 8001708:	f000 f818 	bl	800173c <_init>
 800170c:	1b64      	subs	r4, r4, r5
 800170e:	10a4      	asrs	r4, r4, #2
 8001710:	2600      	movs	r6, #0
 8001712:	42a6      	cmp	r6, r4
 8001714:	d105      	bne.n	8001722 <__libc_init_array+0x2e>
 8001716:	bd70      	pop	{r4, r5, r6, pc}
 8001718:	f855 3b04 	ldr.w	r3, [r5], #4
 800171c:	4798      	blx	r3
 800171e:	3601      	adds	r6, #1
 8001720:	e7ee      	b.n	8001700 <__libc_init_array+0xc>
 8001722:	f855 3b04 	ldr.w	r3, [r5], #4
 8001726:	4798      	blx	r3
 8001728:	3601      	adds	r6, #1
 800172a:	e7f2      	b.n	8001712 <__libc_init_array+0x1e>
 800172c:	08001764 	.word	0x08001764
 8001730:	08001764 	.word	0x08001764
 8001734:	08001764 	.word	0x08001764
 8001738:	08001768 	.word	0x08001768

0800173c <_init>:
 800173c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173e:	bf00      	nop
 8001740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001742:	bc08      	pop	{r3}
 8001744:	469e      	mov	lr, r3
 8001746:	4770      	bx	lr

08001748 <_fini>:
 8001748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174a:	bf00      	nop
 800174c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800174e:	bc08      	pop	{r3}
 8001750:	469e      	mov	lr, r3
 8001752:	4770      	bx	lr
